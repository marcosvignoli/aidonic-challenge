# Project Structure & Architecture

## Monorepo Setup
- **npm Workspaces**: Already configured and working
- **Apps**: `apps/web/` (Next.js) and `apps/mobile/` (React Native CLI)
- **Packages**: `packages/` for shared code (ui, shared-hooks, shared-types, shared-utils)

## Technology Stack
- **Web**: Next.js with TypeScript (already set up)
- **Mobile**: React Native CLI with TypeScript (already set up)
- **Charts**: Recharts (cross-platform compatible)
- **Styling**: Tailwind CSS (web) + React Native StyleSheet (mobile)
- **State Management**: Zustand + React hooks
- **Testing**: Jest + React Testing Library
- **Mock API**: Inline mocks

## Folder Structure (Layer-Based)
```
apps/
├── web/                 # Next.js app
│   ├── src/
│   │   ├── containers/  # Business logic
│   │   ├── presentations/ # UI components
│   │   ├── pages/
│   │   ├── hooks/
│   │   └── utils/
│   └── package.json
└── mobile/              # React Native app
    ├── src/
    │   ├── containers/  # Business logic
    │   ├── presentations/ # UI components
    │   ├── screens/
    │   ├── hooks/
    │   └── utils/
    └── package.json

packages/
├── ui/                  # Shared UI components
├── shared-hooks/        # Shared React hooks
├── shared-types/        # Shared TypeScript types
└── shared-utils/        # Shared utilities
```

## Component Organization
- **Folder-based components** with `index.tsx`
- **Each folder contains** related files (types, styles, hooks)
- **Container/Presentation pattern** is mandatory
- **Shared containers** between web and mobile
- **Platform-specific presentations** in respective apps

## File Naming Conventions
- **Components**: PascalCase (e.g., `DistributionList`)
- **Files**: camelCase (e.g., `index.tsx`, `types.ts`)
- **Folders**: camelCase for all folders (e.g., `distributionList`, `sharedTypes`)
- **React Components**: PascalCase for component names and classes

## Development Guidelines
- **Senior level complexity**: Include performance, accessibility, error handling
- **Cross-platform consistency**: Similar UX between web and mobile
- **Mobile-first approach**: Design for mobile first, then adapt for web
- **Code sharing**: Maximize shared code in packages
- **TypeScript**: Strict mode enabled
- **Testing**: Unit and integration tests for critical paths
- **ES6+ best practices**: Use async/await for promises unless there's a solid reason not to

## Available Scripts
- `npm run dev` - Start dev servers for all apps
- `npm run web:dev` - Start web app on port 3000
- `npm run mobile:dev` - Start Metro bundler for mobile
- `npm run mobile:ios` - Run iOS app on simulator
- `npm run mobile:android` - Run Android app on emulator
description:
globs:
alwaysApply: false
---
